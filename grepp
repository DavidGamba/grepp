#!/usr/bin/perl -w
use strict;
# Copyright (c) 2012-2013 David Gamba. All rights reserved. This program is free
# software; you can redistribute it and/or modify it under the same terms as
# Perl itself.
{
    package Lines;

    sub new
    {
        my $class = shift;
        my $self  = {};
        bless $self, $class;
        $self->initialize(@_);
        return $self;
    }

    sub initialize
    {
        my $self = shift;
        my $hash = shift;

        $self->{line_number} = 0;
        # prev_size, size of prev array.
        $self->{prev_size} = $hash->{prev_size};
        my $file = $hash->{file};
        open $self->{input}, '<', $file
            or warn "couldn't open $file $!\n";
        if ($hash->{preprocessor})
        {
            open $self->{input}, '-|', $hash->{preprocessor}, $file, '-'
                or warn "couldn't open $file $!\n";
        }
        else
        {
            open $self->{input}, '<', $file
                or warn "couldn't open $file $!\n";
        }
        my $in = $self->{input};
    }

    sub next
    {
        my $self = shift;
        my $in   = $self->{input};
        my $line = <$in>;
        $self->{line_number}++;
        unshift @{ $self->{prev} }, $self->{line};
        if ($self->{prev_size})
        {
            while ($#{ $self->{prev} } >= $self->{prev_size})
            {
                pop @{ $self->{prev} };
            }
        }
        $self->{line} = $line;
        return $self->{line};
    }

    sub current
    {
        my $self = shift;
        return $self->{line} || $self->next;
    }

    sub prev
    {
        my $self   = shift;
        my $number = shift;
        if ($number)
        {
            return ${ $self->{prev} }[$number];
        }
        else
        {
            return ${ $self->{prev} }[0];
        }
    }

    # Returns a group of lines, the size of the group is given by 'prev_size'.
    sub lines_group
    {
        my $self       = shift;
        my $line_group = '';
        my $deep       = $self->{prev_size} || 0;
        $deep--;
        while ($deep >= 0)
        {
            $line_group .= $self->prev($deep) if $self->prev($deep);
            $deep--;
        }
        $line_group .= $self->current;
    }

    # Returns a group of lines, the size of the group is given by 'prev_size'.
    # It removes the end of line character in each line and replaces it by a space.
    sub string_group
    {
        my $self       = shift;
        my $line_group = '';
        my $deep       = $self->{prev_size} || 0;
        $deep--;
        while ($deep >= 0)
        {
            $line_group .= $self->prev($deep) if $self->prev($deep);
            if (chomp $line_group) { $line_group .= ' ' }
            $deep--;
        }
        $line_group .= $self->current;
        chomp $line_group;
        return $line_group;
    }

    sub number
    {
        my $self = shift;
        $self->{line_number};
    }
}

{
    package Match;
    use Data::Dumper;

    sub new
    {
        my $class = shift;
        my $self  = {};
        bless $self, $class;
        $self->initialize(@_);
        return $self;
    }

    sub initialize
    {
        my $self = shift;
        my $hash = shift;

        $self->{debug_merge_array} = $hash->{debug_merge_array};
        $self->{array_of_matches}  = ();

        $self->{string} = $hash->{string};
        if ($hash->{case_insensitive})
        {
            $self->{regex} = qr/$hash->{regex}/si;
        }
        else
        {
            $self->{regex} = $hash->{regex};
        }
        $self->{initial_spacing} = 0;
        $self->{initial_spacing} = 1
            if defined $hash->{initial_spacing};
        $self->{current_spacing} = $self->{initial_spacing};
    }

    # Return an array of hashes with a single key. match for array entries
    # that match and no_match for the opposite.
    sub match
    {
        my $self = shift;
        my $string = shift || $self->{string};
        my @result;
        my $match_found = 0;
        if ($string =~ m/$self->{regex}/sp)
        {
            my $prematch  = ${^PREMATCH};
            my $match     = ${^MATCH};
            my $postmatch = ${^POSTMATCH};
            if ($prematch)
            {
                while ($prematch =~ m/^(\n?)([ \f\r\t]*)(.*\n?)/gm)
                {
                    push @result, { no_match => $1 } if $1;
                    if ($self->{current_spacing})
                    {
                        my $result = '';
                        $result .= $2 if $2;
                        $result .= $3 if $3;
                        push @result, { no_match => $result }
                            if $2
                            or $3;
                    }
                    else
                    {
                        push @result, { no_match => $3 } if $3;
                    }
                    $self->{current_spacing} = 1;
                }
            }
            push @result, { match => $match } if $match;
            if ($postmatch)
            {
                my ($m_f, @after) = $self->match($postmatch);
                push @result, @after;
            }
            $match_found = 1;
        }
        else
        {
            while ($string =~ m/^(\n?)(.*\n?)/gm)
            {
                push @result, { no_match => $1 } if $1;
                push @result, { no_match => $2 } if $2;
            }
        }
        $self->{current_spacing} = $self->{initial_spacing};
        return $match_found, @result;
    }

    sub merge_array
    {
        my $self  = shift;
        my $extra = shift;
        my $main  = $self->{array_of_matches};
        my @new_matches;
        print
            "[Debug] == Init merge array: array_of_matches, new_matches\n"
            if $self->{debug_merge_array};
        print Dumper @$main if $self->{debug_merge_array};
        print Dumper $extra if $self->{debug_merge_array};

        my @copy = @$extra;
        if ($main)
        {
            my $counter = 0;
            EXT: foreach my $m (reverse @$main)
            {
                # TODO: only check @main for the size of @$extra, don't go all the way back.
                foreach my $e (@copy)
                {
                    $counter++;
                    print
                        "[Debug] going through array_of_matches in reverse order and new_matches. Entry number $counter\n"
                        if $self->{debug_merge_array};
                    print Dumper $m if $self->{debug_merge_array};
                    print Dumper $e if $self->{debug_merge_array};
                    if (    defined $m->{match}
                        and defined $e->{match}
                        and $m->{match} eq $e->{match})
                    {
                        print
                            "[Debug] Entries are equal, finishing the loop\n"
                            if $self->{debug_merge_array};
                        shift @$extra;
                        @$extra = @copy unless @$extra;
                        last EXT;
                    }
                    elsif ( defined $m->{no_match}
                        and defined $e->{no_match}
                        and $m->{no_match} eq $e->{no_match})
                    {
                        print
                            "[Debug] Entries are equal, finishing the loop\n"
                            if $self->{debug_merge_array};
                        shift @$extra;
                        @$extra = @copy unless @$extra;
                        last EXT;
                    }
                    else
                    {
                        print
                            "[Debug] Entries are different, trying next if exist\n"
                            if $self->{debug_merge_array};
                        shift @$extra;
                        @$extra = @copy unless @$extra;
                    }
                }
            }
        }
        print "[Debug] New matches to add\n"
            if $self->{debug_merge_array};
        print Dumper $extra if $self->{debug_merge_array};
        push @{ $self->{array_of_matches} }, @$extra;
        print "{Debug} == End\n" if $self->{debug_merge_array};
        return @$extra;
    }
}

{
    package Color;
    use Term::ANSIColor;

    sub new
    {
        my $class = shift;
        my $self  = {};
        bless $self, $class;
        $self->initialize(@_);
        return $self;
    }

    sub initialize
    {
        my $self = shift;
        my $hash = shift;

        $self->{file_color}   = $hash->{file_color}   || 'magenta';
        $self->{divider}      = $hash->{divider}      || 'blue';
        $self->{match_color}  = $hash->{match_color}  || 'bold red';
        $self->{number_color} = $hash->{number_color} || 'green';

        $self->{file_only} = $hash->{file_only};
        $self->{color} = $hash->{color} || '';
    }

    sub print_file
    {
        my $self = shift;
        my $file = shift;
        $self->set_color($self->{file_color});
        if ($self->{file_only})
        {
            print "$file\n";
            return;
        }
        print "$file";
        $self->set_color('reset');
    }

    sub print_divider
    {
        my $self = shift;
        $self->set_color($self->{divider});
        print "@_";
        $self->set_color('reset');
    }

    sub print_match
    {
        my $self = shift;
        $self->set_color($self->{match_color});
        my $color  = color $self->{match_color};
        my $string = "@_";
        $string =~ s/\n/\n$color/g;
        print $string;
        $self->set_color('reset');
    }

    sub print_number
    {
        my $self = shift;
        $self->set_color($self->{number_color});
        print "@_";
        $self->set_color('reset');
    }

    sub set_color
    {
        my $self = shift;
        my $c    = shift;
        $c ||= 'reset';
        if ($self->{color} eq 'always')
        {
            print color "$c";
        }
        else
        {
            print color 'reset';
        }
    }
}

__PACKAGE__->run() unless caller();

sub run
{
    use Getopt::Long qw(:config passthrough no_ignore_case);
    use Pod::Usage;
    use Data::Dumper;
    use Cwd qw(cwd abs_path);
    use File::Spec::Functions qw( abs2rel );
    use File::Find;

    GetOptions(
        'h|?'  => sub { pod2usage(-verbose => 0) },
        'help' => sub { pod2usage(-verbose => 3) },
    );
    my %options = ();
    GetOptions(
        \%options,              'ignore-case|i',
        'fullpath',             'I',
        'no-filename',          'line-number|n',
        'files-with-matches|l', 'color=s',
        'iname=s',              'name=s',
        'ignore|v=s',           'spacing',
        'preprocessor|pp=s',    'context|C=i',
        'multi|m=i',            'no-git'
    );
    @_ = @ARGV;
    $options{search_pattern} = shift;
    pod2usage("[ERROR] Missing search pattern!\n")
        unless defined $options{search_pattern};

    if ($options{color})
    {
        pod2usage("[ERROR] wrong color argument!\n")
            unless $options{color} eq 'never'
            or $options{color}     eq 'always'
            or $options{color}     eq 'auto';
    }

    my $path = shift;
    $options{cwd} = cwd;
    $path = ($path) ? abs_path($path) : $options{cwd};

    # Set pager and color if not piped output
    END { close STDOUT }
    if (-t STDOUT)
    {
        my $pager = $ENV{PAGER} || "less";
        open(STDOUT, "| $pager");
        $options{color} = 'always'
            if $options{color} and $options{color} eq 'auto';
        $options{color} = 'always' unless $options{color};
    }

    $options{'no-filename'} = 1 if -f $path;
    $options{context} ||= 0;

    find(sub { grep_file(\%options) }, $path);

    close STDOUT;
}

# TODO
# Use git-check-ignore to check if a file is ignored or not.
# This is a new command as of git 1.8.2 so there must be a check for the
# availability of the comand before running it.
sub git_ignore_file
{
    return 0;
}

sub grep_file
{
    my $file    = $File::Find::name;
    my $options = shift;

    return unless -f $file;
    my $binary = 1 if -B $file;
    return if $options->{I} and $binary;
    if ($options->{name})
    {
        return unless $file =~ /$options->{name}/;
    }
    if ($options->{iname})
    {
        return unless $file =~ /$options->{iname}/i;
    }
    if ($options->{ignore})
    {
        return if $file =~ /$options->{ignore}/i;
    }
    unless ($options->{'no-git'})
    {
        return if git_ignore_file($file);
    }

    my $print_file =
        (defined $options->{fullpath})
        ? $file
        : abs2rel($file, $options->{cwd});

    my $lines = Lines->new(
        {   file         => $file,
            prev_size    => $options->{multi},
            preprocessor => $options->{preprocessor}
        }
    );
    my $match = Match->new(
        {   regex             => $options->{search_pattern},
            case_insensitive  => $options->{'ignore-case'},
            initial_spacing   => $options->{'spacing'},
            debug_merge_array => 0
        }
    );
    my $color = Color->new({ color => $options->{color} });

    my @precontext;
    my $initial_divider = 0;
    while ($lines->next)
    {
        unless ( $binary and !$options->{preprocessor} or defined $options->{'files-with-matches'}) {
            push @precontext, $lines->number;
        }
        shift @precontext if $#precontext > $options->{context};
        if ($options->{multi})
        {
            $match->{string} = $lines->lines_group;
        }
        else
        {
            $match->{string} = $lines->current;
        }
        my ($match_found, @match_array) = $match->match;
        my @new_matches =
            ($options->{multi})
            ? $match->merge_array(\@match_array)
            : @match_array;
        if ($match_found)
        {
            pop @precontext;
            while (@precontext)
            {
                if ($#precontext == ($options->{context} - 1))
                {
                    $color->print_divider("--\n") if $initial_divider;
                    $initial_divider = 1;
                }
                print_file($print_file, $color, $options, '-');
                my $precontext_number = shift(@precontext);
                print_number($precontext_number, $color, $options, '-');
                print $lines->prev(
                    $lines->number - $precontext_number - 1);
            }
            return if print_file($print_file, $color, $options, ':');
            print_number($lines->number, $color, $options, ':');
            if ($binary)
            {
                unless ($options->{preprocessor})
                {
                    $color->print_match('BINARY');
                    print " file matches\n";
                    return;
                }
            }
            foreach my $entry (@new_matches)
            {
                $color->print_match($entry->{match}) if $entry->{match};
                print $entry->{no_match} if $entry->{no_match};
            }
        }
    }
}

sub print_file
{
  my $file    = shift;
  my $color   = shift;
  my $options = shift;
  my $divider = shift;
  unless ($options->{'no-filename'})
  {
    $color->print_file($file);
    if (defined $options->{'files-with-matches'})
    {
      print "\n";
      return 1;
    }
    $color->print_divider(" $divider") if $divider;
  }
  return 0;
}

sub print_number
{
  my $number  = shift;
  my $color   = shift;
  my $options = shift;
  my $divider = shift;
  if ($options->{'line-number'})
  {
    $color->print_number($number);
    $color->print_divider($divider);
  }
}

__END__

=head1 NAME

grepp

=head1 DESCRIPTION

greps B<pattern> recursively from current dir or B<location> in every file
except for files in the git ignore file or given by the cmdline option. It also
can filter by B<file pattern>.

It is inspired in grep and find, but unlike grep it doesn't print a ':'
divider after the file name since that makes it annoying to double click
to select.

As it is expected, the color only shows when the ouput is not being
piped. See B<--color> for more details.

It automatically pipes the output to your environment B<PAGER> or to B<less> if
no environment value is set.

=head1 SYNOPSIS

grepp [-i] [-l] [-I] [-n] I<pattern> [I<location>]
      [--fullpath] [--color I<never>|I<auto>|I<always>]
      [--name|--iname I<file_pattern>]
      [-v | --ignore I<file_pattern>]
      [--spacing] [--pp|--prerocessor I<program>]

grepp [--help]       # shows extended help

grepp [-h |-?]       # shows short help

=head1 OPTIONS

=over 4

=item I<pattern>

Pattern to grep for (In regex syntax).

=item I<location>

Location to search in

=item B< -i >

Ignore case

=item B< -l >

Print file name only

=item B< -I >

Ignore binary files

=item B<< --name | --iname >> I<file_pattern>

Filter result to match only things that match I<file_pattern>. B<< iname >> does
case insensitive matching.

=item B<< -v | --ignore >> I<file_pattern>

Filter result to additionally ignore files that match I<file_pattern>. Case
insensitive.

=item B<< --spacing >>

Print original spacing. By default initial spacing is ignored.

=item B<< --fullpath >>

Print full paths for matching files

=item B<< --color >> I<never>|I<auto>|I<always>

Select color use: never, auto (default), always

=item B<< --preprocessor | --pp >> I<program>

Run each file by a preprocessor program before searching for matches.

B<< Example: >> "grepp pattern --iname '\.pdf' --preprocessor
pdftotext" to run each file with '.pdf' extention through the
'pdftotext' program to convert pdf files to text using pdftotext before
grepping.

When using the B<< --preprocessor >> option the I<BINARY> filtering is
disabled, you should filter results by filename extension using B<< --name >>
or B<< iname >>.

=item B<< --context <number> >>

Number of lines of context to use. It implies B<< --spacing >>.

=item B<< -m | --multi >> I<TODO>

Allow grepping for regex in multiple lines. '\n' gets changed into space.

=back

=head1 BUG REPORTS

David Gamba

=cut

#!/usr/bin/perl -w
use strict;
# Copyright (c) 2012-2013 David Gamba. All rights reserved. This program is free
# software; you can redistribute it and/or modify it under the same terms as
# Perl itself.
{
    package Lines;
    sub new
    {
        my $class = shift;
        my $self  = {};
        bless $self, $class;
        $self->initialize(@_);
        return $self;
    }

    sub initialize
    {
        my $self = shift;
        my $hash = shift;

        $self->{line_number} = 0;
        # prev_size, size of prev array.
        $self->{prev_size} = $hash->{prev_size};
        my $file = $hash->{file};
        open $self->{input}, '<', $file or warn "couldn't open $file $!\n";
        my $in = $self->{input};
    }

    sub next
    {
        my $self = shift;
        my $in = $self->{input};
        my $line = <$in>;
        $self->{line_number}++;
        unshift @{$self->{prev}}, $self->{line};
        if ( $self->{prev_size} ) {
            while($#{$self->{prev}} >= $self->{prev_size}) {
                pop @{$self->{prev}};
            }
        }
        $self->{line} = $line;
        return $self->{line};
    }

    sub current
    {
        my $self = shift;
        return $self->{line} || $self->next;
    }

    sub prev
    {
        my $self   = shift;
        my $number = shift;
        if ( $number ) {
            return ${$self->{prev}}[$number]
        }
        else {
            return ${$self->{prev}}[0]
        }
    }

    sub lines_group
    {
        my $self = shift;
        my $line_group = '';
        my $deep = $self->{prev_size} || 0;
        $deep--;
        while($deep >= 0) {
            $line_group .= $self->prev($deep) if $self->prev($deep);
            $deep--;
        }
        $line_group .= $self->current;
    }

    sub string_group
    {
        my $self = shift;
        my $line_group = '';
        my $deep = $self->{prev_size} || 0;
        $deep--;
        while($deep >= 0) {
            $line_group .= $self->prev($deep) if $self->prev($deep);
            chomp $line_group;
            $deep--;
        }
        $line_group .= $self->current;
        chomp $line_group;
        return $line_group;
    }

    sub number
    {
        my $self = shift;
        $self->{line_number};
    }
}

{
    package Match;
    sub new
    {
        my $class = shift;
        my $self  = {};
        bless $self, $class;
        $self->initialize(@_);
        return $self;
    }

    sub initialize
    {
        my $self = shift;
        my $hash = shift;

        $self->{string} = $hash->{string};
        if ($hash->{case_insensitive}) {
            $self->{regex} = qr/^(\s*)(.*?)($hash->{regex})(.*)$/is;
        }
        else {
            $self->{regex} = qr/^(\s*)(.*?)($hash->{regex})(.*)$/s;
        }
        $self->{initial_spacing} = 0;
        $self->{initial_spacing} = 1 if defined $hash->{initial_spacing};
        $self->{current_spacing} = $self->{initial_spacing};
    }

    # Return an array of hashes with a single key. match for array entries
    # that match and no_match for the opposite.
    sub match
    {
        my $self    = shift;
        my $string  = shift || $self->{string};
        my @result;
        my $match_found = 0;
        # $1 -> spacing pre match
        # $2 -> pre match
        # $3 -> regex first match
        # $4 -> after match
        if ($string =~ m/$self->{regex}/) {
            push @result, { no_match => $1 } if $self->{current_spacing};
            $self->{current_spacing} = 1;
            push @result, { no_match => $2 } if $2;
            push @result, { match => $3 }    if $3;
            if ($4) {
                my ($m_f, @after) = $self->match($4);
                push @result, @after;
            }
            $match_found = 1;
        }
        else {
            push @result, { no_match => $string };
        }
        $self->{current_spacing} = $self->{initial_spacing};
        return $match_found, @result;
    }
}

{
    package Color;
    use Term::ANSIColor;
    sub new
    {
        my $class = shift;
        my $self  = {};
        bless $self, $class;
        $self->initialize(@_);
        return $self;
    }

    sub initialize
    {
        my $self = shift;
        my $hash = shift;

        $self->{file_color}   = $hash->{file_color}   || 'magenta';
        $self->{colon_color}  = $hash->{colon_color}  || 'blue';
        $self->{match_color}  = $hash->{match_color}  || 'bold red';
        $self->{number_color} = $hash->{number_color} || 'green';

        $self->{file_only} = $hash->{file_only};
        $self->{color}     = $hash->{color} || '';
    }

    sub print_file
    {
        my $self = shift;
        my $file = shift;
        $self->set_color($self->{file_color});
        if ($self->{file_only}) {
            print "$file\n";
            return;
        }
        print "$file";
        $self->set_color('reset');
    }

    sub print_colon
    {
        my $self = shift;
        $self->set_color($self->{colon_color});
        print " :";
        $self->set_color('reset');
    }

    sub print_match
    {
        my $self = shift;
        $self->set_color($self->{match_color});
        print @_;
        $self->set_color('reset');
    }

    sub print_number
    {
        my $self = shift;
        $self->set_color($self->{number_color});
        print "@_";
        $self->set_color($self->{colon_color});
        print ":";
        $self->set_color('reset');
    }


    sub set_color
    {
        my $self = shift;
        my $c = shift;
        $c ||= 'reset';
        if ( $self->{color} eq 'always' ) {
            print color "$c";
        }
        else {
            print color 'reset';
        }
    }
}

__PACKAGE__->run() unless caller();

sub run
{
    use Getopt::Long qw(:config passthrough no_ignore_case);
    use Pod::Usage;
    use Data::Dumper;
    use Cwd qw(cwd abs_path);
    use File::Spec::Functions qw( abs2rel );
    use File::Find;

    GetOptions(
        'h|?'       => sub { pod2usage(-verbose => 0) },
        'help'      => sub { pod2usage(-verbose => 3) },
    );
    my %options = ();
    GetOptions(\%options,
      'ignore-case|i',
      'fullpath',
      'I',
      'no-filename',
      'line-number|n',
      'files-with-matches|l',
      'color=s',
      'iname=s',
      'name=s',
      'ignore|v=s',
      'spacing'
    );
    @_ = @ARGV;
    $options{search_pattern} = shift;
    pod2usage("[ERROR] Missing search pattern!\n") unless defined $options{search_pattern};
    if ($options{color}) {
        pod2usage("[ERROR] wrong color argument!\n")
            unless $options{color} eq 'never'
                or $options{color} eq 'always'
                or $options{color} eq 'auto';
    }

    my $path = shift;
    $options{cwd} = cwd;
    $path = ($path) ? abs_path($path) : $options{cwd};

    # Set pager and color if not piped output
    END { close STDOUT }
    if (-t STDOUT)
    {
        my $pager = $ENV{PAGER} || "less";
        open(STDOUT, "| $pager");
        $options{color} = 'always'
            if $options{color} and $options{color} eq 'auto';
        $options{color} = 'always' unless $options{color};
    }

    $options{'no-filename'} = 1 if -f $path;

    find(sub{grep_file(\%options)}, $path);

    close STDOUT;
}

sub grep_file
{
    my $file = $File::Find::name;
    my $options = shift;

    return unless -f $file;
    my $binary = 1 if -B $file;
    return if $options->{I} and $binary;
    if( $options->{name} ) {
      return unless $file =~ /$options->{name}/;
    }
    if( $options->{iname} ) {
      return unless $file =~ /$options->{iname}/i;
    }
    if( $options->{ignore} ) {
      return if $file =~ /$options->{ignore}/i;
    }

    my $print_file =
        (defined $options->{fullpath})
        ? $file
        : abs2rel($file, $options->{cwd});

    my $lines = Lines->new({ file => $file, prev_size => 3 });
    my $match = Match->new(
        {   regex            => $options->{search_pattern},
            case_insensitive => $options->{'ignore-case'},
            initial_spacing  => $options->{'spacing'}
        }
    );
    my $color = Color->new({ color => $options->{color} });
    while ($lines->next)
    {
        $match->{string} = $lines->current;
        my ($match_found, @match_array) = $match->match;
        if ($match_found)
        {
            unless ( $options->{'no-filename'}) {
                $color->print_file($print_file);
                if (defined $options->{'files-with-matches'}) {
                    print "\n";
                    return;
                }
                $color->print_colon;
            }
            if ($options->{'line-number'}) {
                $color->print_number($lines->number);
            }
            if($binary) {
                $color->print_match('BINARY');
                print " file matches\n";
                return;
            }
            foreach my $entry (@match_array)
            {
                $color->print_match($entry->{match}) if $entry->{match};
                print $entry->{no_match} if $entry->{no_match};
            }
        }
    }
}

__END__

=head1 NAME

grepp

=head1 DESCRIPTION

greps B<pattern> recursively from current dir or B<location> in every file
except for files in the git ignore file or given by the cmdline option. It also
can filter by B<file pattern>.

It is inspired in grep and find, but unlike grep it doesn't print a ':'
divider after the file name since that makes it annoying to double click
to select.

As it is expected, the color only shows when the ouput is not being
piped. See B<--color> for more details.

It automatically pipes the output to your environment B<PAGER> or to B<less> if
no environment value is set.

=head1 SYNOPSIS

grepp [-i] [-l] [-I] [-n] I<pattern> [I<location>]
      [--fullpath] [--color I<never>|I<auto>|I<always>]
      [--name|--iname I<file_pattern>]
      [-v | --ignore I<file_pattern>]
      [--spacing]

grepp [--help]       # shows extended help

grepp [-h |-?]       # shows short help


=head1 OPTIONS

=over 4

=item I<pattern>

Pattern to grep for (In regex syntax).

Note: if you need to use I<or> in your regex '(a|b)' do so with
non-returning groups: I<'(?:a|b)'>.

=item I<location>

Location to search in

=item B< -i >

Ignore case

=item B< -l >

Print file name only

=item B< -I >

Ignore binary files

=item B<< --name | --iname >> I<file_pattern>

Filter result to match only things that match I<file_pattern>. B<< iname >> does
case insensitive matching.

=item B<< -v | --ignore >> I<file_pattern>

Filter result to additionally ignore files that match I<file_pattern>. Case
insensitive.

=item B<< --spacing >>

Print original spacing. By default initial spacing is ignored.

=item B<< --fullpath >>

Print full paths for matching files

=item B<< --color >> I<never>|I<auto>|I<always>

Select color use: never, auto (default), always

=item B<< --preprocessor | --pp >> I<program> I<TODO>

Run each file by a preprocessor program before searching for matches.

B<< Example: >> Use '--iname '\.pdf' --preprocessor pdftotext' to run each file
with 'pdf' extention through the 'pdftotext' program to convert pdf files to
text using pdftotext before grepping.

=item B<< --lines <lines> >> I<TODO>

Number of lines of context to use. It implies B<< --spacing >>.

=item B<< -m | --multi >> I<TODO>

Allow grepping for regex in multiple lines. '\n' gets changed into space.

=back

=head1 BUG REPORTS

David Gamba

=cut
